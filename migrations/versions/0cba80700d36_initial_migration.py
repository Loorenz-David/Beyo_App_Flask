"""Initial migration

Revision ID: 0cba80700d36
Revises: 
Create Date: 2025-09-22 13:03:52.445865

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0cba80700d36'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Dealer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dealer_type', sa.String(), nullable=True),
    sa.Column('dealer_name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('raw_address', sa.String(), nullable=True),
    sa.Column('coordinates', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('purchased_count', sa.Integer(), nullable=True),
    sa.Column('item_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('Dealer', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_Dealer_dealer_name'), ['dealer_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_Dealer_dealer_type'), ['dealer_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_Dealer_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_Dealer_item_count'), ['item_count'], unique=False)
        batch_op.create_index(batch_op.f('ix_Dealer_purchased_count'), ['purchased_count'], unique=False)
        batch_op.create_index(batch_op.f('ix_Dealer_raw_address'), ['raw_address'], unique=False)

    op.create_table('Item_Notes_Subject',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subject', sa.String(), nullable=True),
    sa.Column('notes_counter', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('Item_Notes_Subject', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_Item_Notes_Subject_subject'), ['subject'], unique=False)

    op.create_table('Item_Stats_Current',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stats_for', sa.String(), nullable=True),
    sa.Column('category', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('type', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('issues', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('parts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('missing_parts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('purchased_price', sa.Integer(), nullable=True),
    sa.Column('valuation', sa.Integer(), nullable=True),
    sa.Column('sold_price', sa.Integer(), nullable=True),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('Item_Stats_Current', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_Item_Stats_Current_stats_for'), ['stats_for'], unique=False)

    op.create_table('Role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('metafields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role')
    )
    op.create_table('User',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('profile_picture', sa.String(), nullable=True),
    sa.Column('metafields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_User_email'), ['email'], unique=True)

    op.create_table('Dealer_History',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('column_name', sa.String(), nullable=True),
    sa.Column('from_value', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('to_value', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recorder_time', sa.DateTime(), nullable=True),
    sa.Column('dealer_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['dealer_id'], ['Dealer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Dealer_Notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subject', sa.String(), nullable=True),
    sa.Column('content', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('dealer_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['dealer_id'], ['Dealer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('article_number', sa.String(), nullable=True),
    sa.Column('reference_number', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('issues', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('parts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('missing_parts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('purchased_price', sa.Integer(), nullable=True),
    sa.Column('valuation', sa.Integer(), nullable=True),
    sa.Column('sold_price', sa.Integer(), nullable=True),
    sa.Column('metafields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('images', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('dealer_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['dealer_id'], ['Dealer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('Item', schema=None) as batch_op:
        batch_op.create_index('idx_dimensions_path_ops', ['dimensions'], unique=False, postgresql_using='gin', postgresql_ops={'dimensions': 'jsonb_path_ops'})
        batch_op.create_index('idx_issues_path_ops', ['issues'], unique=False, postgresql_using='gin', postgresql_ops={'issues': 'jsonb_path_ops'})
        batch_op.create_index('idx_metafields_ops', ['metafields'], unique=False, postgresql_using='gin', postgresql_ops={'metafields': 'jsonb_ops'})
        batch_op.create_index('idx_metafields_path_ops', ['metafields'], unique=False, postgresql_using='gin', postgresql_ops={'metafields': 'jsonb_path_ops'})
        batch_op.create_index('idx_missing_parts_path_ops', ['missing_parts'], unique=False, postgresql_using='gin', postgresql_ops={'missing_parts': 'jsonb_path_ops'})
        batch_op.create_index('idx_properties_ops', ['properties'], unique=False, postgresql_using='gin', postgresql_ops={'properties': 'jsonb_ops'})
        batch_op.create_index('idx_properties_path_ops', ['properties'], unique=False, postgresql_using='gin', postgresql_ops={'properties': 'jsonb_path_ops'})
        batch_op.create_index(batch_op.f('ix_Item_article_number'), ['article_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_category'), ['category'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_location'), ['location'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_purchased_price'), ['purchased_price'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_reference_number'), ['reference_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_sold_price'), ['sold_price'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_state'), ['state'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_type'), ['type'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_valuation'), ['valuation'], unique=False)

    op.create_table('Item_Note',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('note_content', sa.String(), nullable=True),
    sa.Column('creation_time', sa.DateTime(), nullable=True),
    sa.Column('subject_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['subject_id'], ['Item_Notes_Subject.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['Role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('Item_History',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('column_name', sa.String(), nullable=True),
    sa.Column('from_value', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('to_value', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recorded_time', sa.DateTime(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('user_name', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['Item.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('Item_History', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_Item_History_column_name'), ['column_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_Item_History_type'), ['type'], unique=False)

    op.create_table('Items_Notes',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('note_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['Item.id'], ),
    sa.ForeignKeyConstraint(['note_id'], ['Item_Note.id'], ),
    sa.PrimaryKeyConstraint('item_id', 'note_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Items_Notes')
    with op.batch_alter_table('Item_History', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_Item_History_type'))
        batch_op.drop_index(batch_op.f('ix_Item_History_column_name'))

    op.drop_table('Item_History')
    op.drop_table('user_roles')
    op.drop_table('Item_Note')
    with op.batch_alter_table('Item', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_Item_valuation'))
        batch_op.drop_index(batch_op.f('ix_Item_type'))
        batch_op.drop_index(batch_op.f('ix_Item_state'))
        batch_op.drop_index(batch_op.f('ix_Item_sold_price'))
        batch_op.drop_index(batch_op.f('ix_Item_reference_number'))
        batch_op.drop_index(batch_op.f('ix_Item_purchased_price'))
        batch_op.drop_index(batch_op.f('ix_Item_location'))
        batch_op.drop_index(batch_op.f('ix_Item_category'))
        batch_op.drop_index(batch_op.f('ix_Item_article_number'))
        batch_op.drop_index('idx_properties_path_ops', postgresql_using='gin', postgresql_ops={'properties': 'jsonb_path_ops'})
        batch_op.drop_index('idx_properties_ops', postgresql_using='gin', postgresql_ops={'properties': 'jsonb_ops'})
        batch_op.drop_index('idx_missing_parts_path_ops', postgresql_using='gin', postgresql_ops={'missing_parts': 'jsonb_path_ops'})
        batch_op.drop_index('idx_metafields_path_ops', postgresql_using='gin', postgresql_ops={'metafields': 'jsonb_path_ops'})
        batch_op.drop_index('idx_metafields_ops', postgresql_using='gin', postgresql_ops={'metafields': 'jsonb_ops'})
        batch_op.drop_index('idx_issues_path_ops', postgresql_using='gin', postgresql_ops={'issues': 'jsonb_path_ops'})
        batch_op.drop_index('idx_dimensions_path_ops', postgresql_using='gin', postgresql_ops={'dimensions': 'jsonb_path_ops'})

    op.drop_table('Item')
    op.drop_table('Dealer_Notes')
    op.drop_table('Dealer_History')
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_User_email'))

    op.drop_table('User')
    op.drop_table('Role')
    with op.batch_alter_table('Item_Stats_Current', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_Item_Stats_Current_stats_for'))

    op.drop_table('Item_Stats_Current')
    with op.batch_alter_table('Item_Notes_Subject', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_Item_Notes_Subject_subject'))

    op.drop_table('Item_Notes_Subject')
    with op.batch_alter_table('Dealer', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_Dealer_raw_address'))
        batch_op.drop_index(batch_op.f('ix_Dealer_purchased_count'))
        batch_op.drop_index(batch_op.f('ix_Dealer_item_count'))
        batch_op.drop_index(batch_op.f('ix_Dealer_email'))
        batch_op.drop_index(batch_op.f('ix_Dealer_dealer_type'))
        batch_op.drop_index(batch_op.f('ix_Dealer_dealer_name'))

    op.drop_table('Dealer')
    # ### end Alembic commands ###
